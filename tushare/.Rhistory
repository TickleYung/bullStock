x.out=pcout(as.data.frame(t(simulate_data())),makeplot=FALSE)
expr_log3 <- t(simulate_data())
# expr_log3 <- t(simulate_data(10,100,50,show_name = F))
# add outlier
expr_log3 <- rbind(expr_log3, full=rep(c(19,20),30), empty=rep(c(0,1),30))
x.out=pcout(expr_log3,makeplot=FALSE)
expr_log3
pheatmap(t(expr_log3), cluster_rows = F, cluster_cols = F)
x.out=pcout(x,makeplot=T)
?png
x.out$wloc
x.out$x.dist1
hist(x.out$x.dist1)
x.out$x.dist1
dim(x)
?pcout
pcout
?mad
?scd
?svd
cumsum
?cumsum
?diag
dim(diag(3))
diag(3)
?qchisq
?mad
?svd
ï¼Ÿcumsum
?cumsum
?diag
?qchisq
dchisq(1, df = 1:3)
qchisq(1, df = 1:3)
qchisq(10, df = 1:3)
qchisq(0.5, df = 1:3)
?scale
(xy <- cbind(x = 1:10, y = c(1:3, 8:5, 8:10)))
w1 <- c(0,0,0,1,1,1,1,1,0,0)
cov.wt(xy, wt = w1) # i.e. method = "unbiased"
cov.wt(xy, wt = w1, method = "ML", cor = TRUE)
library(scater)
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts),
colData = sc_example_cell_info
)
example_sce <- calculateQCMetrics(example_sce)
## with a set of feature controls defined
example_sce <- calculateQCMetrics(example_sce,
feature_controls = list(set1 = 1:40))
isOutlier(example_sce$total_counts, nmads = 3)
example_sce$total_counts
a <- isOutlier(example_sce$total_counts, nmads = 3)
example_sce$total_counts[a]
?dim.red
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/three_groups.Rdata")
View(RET_CD_DEGs)
View(TCA_DEGs)
View(RET_CD)
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/three.seperate.Rdata")
View(all_DEGs_sort_1000)
all_DEGs_sort_1000$mark
table(all_DEGs_sort_1000$mark)
table(all_DEGs_sort_2000$mark)
View(all_DEGs)
View(common_DEGs)
View(RET_CD)
View(RET_CD_DEGs)
View(TCA_DEGs)
View(RET_NCD_DEGs)
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/3_grouups.Rdata")
RET_NCD
dim(RET_NCD)
View(all_DEGs_sort_2000)
all_DEGs_sort_2000$mark
table(all_DEGs_sort_2000$mark)
write.csv(all_DEGs_sort_2000, file = "/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/2000/all_DEGs_sort_2000.csv")
?kmeans
hist(rnorm(1000,10,3))
hist(rnorm(1000,10,3),breaks = 100)
library(ZIM)
zrind(1000, 10, 1, 0.5)
zrinb(1000, 10, 1, 0.5)
rzinb(1000, 10, 1, 0.5)
hist(rzinb(1000, 10, 1, 0.5))
hist(rzinb(1000, 10, 4, 0.5))
hist(rzinb(1000, 10, 7, 0.5))
hist(rzinb(1000, 10, 10, 0.5))
hist(rzinb(1000, 10, 50, 0.5))
hist(rzinb(1000, 10, 50, 0.5), breaks = 100)
hist(rzinb(1000, 10, 50, 0.5), breaks = 10)
hist(rzinb(1000, 10, 50, 0.5), breaks = 20)
hist(rzinb(1000, 10, 50, 0.5), breaks = 10)
logExpr=10; ngene=20; ncell=10; show_matrix=T; show_name=T
totalGene <- ngene*11
totalCell <- ncell*4
expr_matrix <- matrix(rep(0,totalGene*totalCell), nrow=totalGene, ncol=totalCell)
# MT1
for (i in 1:ngene) {
for (j in 1:ncell) {
expr_matrix[i,j] <- logExpr
}
}
for (i in (ngene*4+1):(ngene*5)) {
for (j in (ncell*3+1):(ncell*4)) {
expr_matrix[i,j] <- logExpr
}
}
for (i in (ngene*4+1):(ngene*5)) {
for (j in 1:ncell) {
expr_matrix[i,j] <- logExpr
}
}
# MT1'
for (i in (ngene+1):(ngene*2)) {
for (j in (ncell+1):totalCell) {
expr_matrix[i,j] <- logExpr
}
}
# MT1''
for (i in (ngene*2+1):(ngene*3)) {
for (j in (ncell+1):(ncell*2)) {
expr_matrix[i,j] <- logExpr/sqrt(i-ngene*2)
}
}
# MT1'''
for (i in (ngene*3+1):(ngene*4)) {
for (j in (ncell*2+1):(ncell*3)) {
expr_matrix[i,j] <- logExpr/sqrt(j-ncell*2)
}
}
# MT2
for (i in (ngene*5+1):(ngene*6)) {
for (j in (ncell*3+1-ncell/2):(ncell*4-ncell/2)) {
expr_matrix[i,j] <- logExpr/sqrt(2*abs(j-((ncell*3+1-ncell/2+ncell*4-ncell/2))/2))
}
}
# MT3
for (i in (ngene*6+1):(ngene*7)) {
for (j in (ncell*0+1):(ncell*1)) {
expr_matrix[i,j] <- logExpr/2
}
}
for (i in (ngene*6+1):(ngene*7)) {
expr_matrix[i,] <- expr_matrix[i,] + logExpr/2
}
# MT4
piece <- logExpr/totalCell
for (i in (ngene*7+1):(ngene*8)) {
for (j in (ncell*0+1):(totalCell)) {
#expr_matrix[i,j] <- logExpr/sqrt(1+abs(j-totalCell))
expr_matrix[i,j] <- piece*j
}
}
# MT4'
for (i in (ngene*8+1):(ngene*9)) {
for (j in (ncell*0+1):(totalCell)) {
# expr_matrix[i,j] <- logExpr/sqrt(j)
expr_matrix[i,j] <- logExpr-piece*j
}
}
# Noise1
for (i in (ngene*9+1):(ngene*10)) {
tmp_mean <- sample(1:logExpr, 1)
tmp_sd <- sample(seq(1,3,by=0.3), 1)
expr_matrix[i,] <- rnorm(totalCell, mean = tmp_mean, sd = tmp_sd)
# hist(rnorm(1000,10,3),breaks = 100)
}
# Noise2
for (i in (ngene*10+1):(ngene*11)) {
library(ZIM)
tmp_k <- sample(1:logExpr, 1)
tmp_lambda <- sample(seq(1,10,by=1), 1)
tmp_omega <- sample(seq(0,1,by=0.1), 1)
expr_matrix[i,] <- rzinb(totalCell, tmp_k, tmp_lambda, tmp_omega)
# hist(rzinb(1000, 10, 50, 0.5))
}
rownames(expr_matrix) <- 1:totalGene
colnames(expr_matrix) <- 1:totalCell
expr_matrix[expr_matrix>10] <- 10
expr_matrix[expr_matrix<0] <- 0
options(stringsAsFactors = F)
expr_matrix <- as.data.frame(expr_matrix)
annotation_col <- data.frame(cluster=colnames(expr_matrix), row.names = colnames(expr_matrix))
annotation_col[(ncell*0+1):(ncell*1),] <- "Subtype1"
annotation_col[(ncell*1+1):(ncell*2),] <- "Subtype2"
annotation_col[(ncell*2+1):(ncell*3),] <- "Subtype3"
annotation_col[(ncell*3+1):(ncell*4),] <- "Subtype4"
annotation_row <- data.frame(markerType=rownames(expr_matrix), row.names = rownames(expr_matrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
library(RColorBrewer)
annotation_colors1 <- brewer.pal(4,"Set1")
names(annotation_colors1) <- c("Subtype1", "Subtype2", "Subtype3", "Subtype4")
annotation_colors2 <- brewer.pal(10,"Set3")
names(annotation_colors2) <- c("MT1", "MT1-neg", "MT1'", "MT1''", "MT2-intermediate", "MT3", "MT4", "MT4'", "Noise1", "Noise2")
if (show_matrix){
library(pheatmap)
pheatmap(expr_matrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_col, annotation_row = annotation_row, annotation_colors=list(cluster=annotation_colors1 , markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
}
expr_matrix2 <- expr_matrix
geneCount <- dim(expr_matrix)[1]
cellCount <- dim(expr_matrix)[2]
for (i in 1:geneCount) {
randomCells <- sample(1:cellCount, as.integer(0.1*cellCount))
expr_matrix[i,randomCells] <- 0
}
pheatmap(expr_matrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_col, annotation_row = annotation_row, annotation_colors=list(cluster=annotation_colors1 , markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
method="pearson"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix
dim(corMatrix)
dim(expr_matrix)
pheatmap(corMatrix)
corMatrix[is.na(corMatrix)] <- 0
pheatmap(corMatrix)
pheatmap(corMatrix, cluster_cols = F, cluster_rows = F)
method="spearman"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
pheatmap(corMatrix, cluster_cols = F, cluster_rows = F)
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
annotation_row
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
method="pearson"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
corMatrix <- cor(x = as.matrix(t(expr_matrix2)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
?pheatmap
corMatrix <- cor(x = as.matrix(t(expr_matrix2)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("dark blue", "blue", "white", "orange", "red")))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("dark blue", "blue", "white", "orange", "red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c(""blue", "white","red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("blue", "white","red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, colorRampPalette(rev(brewer.pal(n = 7, name ="RdYlBu")))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdYlBu")))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdBu")))(100))
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdBu")))(100))
load("/Users/surgery/Downloads/Supplementary_Software/R/data/Test_3_Pollen.RData")
dim(Test_3_Pollen$in_X)
deng <- readRDS("/Users/surgery/Project/HOME/github/scRNA.seq.course/deng/deng-reads.rds")
dim(deng)
springCoord <- read.csv("/Users/surgery/Project/HOME/github/SPRING/datasets/SAG_python/coordinates.txt", header = F, row.names = 1)
plot(springCoord$V2, springCoord$V3)
plot(springCoord$V2, -springCoord$V3)
colanno <- read.csv("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/1-batch/1-formal/SAG/Output/all_SAG_colanno.csv", header = T)
colanno
colanno <- read.csv("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/1-batch/1-formal/SAG/Output/all_SAG_colanno.csv", header = T, row.names = 1)
colanno
springCoord <- read.csv("/Users/surgery/Project/HOME/github/SPRING/datasets/SAG_python/coordinates.txt", header = F, row.names = 1)
colanno <- read.csv("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/1-batch/1-formal/SAG/Output/all_SAG_colanno.csv", header = T, row.names = 1)
plot(springCoord$V2, -springCoord$V3)
?prcomp
library(devtools)
install_github("velocyto-team/velocyto.R")
source("https://bioconductor.org/biocLite.R")
biocLite("pcaMethods")
install.packages("h5")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
install.packages('DBI')
library(devtools)
install_github("velocyto-team/velocyto.R")
install.packages("Rcpp")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R". force=T)
library(devtools)
install_github("velocyto-team/velocyto.R", force=T)
library(velocyto.R)
ldat <- read.loom.matrices("/Users/surgery/project/HOME/github/velocyto-notebooks/10X43_1.loom")
ldat
dim(ldat)
ldat$spliced
dim(ldat$spliced)
dim(ldat$unspliced)
dim(ldat$ambiguous)
dat <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/dat.rds"))
dim(dat)
dat$exons
dat$expr.lstat
ldat <- read.loom.matrices("/Users/surgery/project/HOME/github/velocyto-notebooks/all.loom")
ldat2 <- read.loom.matrices("/Users/surgery/project/HOME/github/velocyto-notebooks/10X43_1.loom")
ldat$spliced
library(velocyto.R)
dat <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/dat.rds"))
cell.colors <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/cell.colors.rds"))
emb <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/embedding.rds"))
cell.colors
emb
dat$emat
log10(rowSums(dat$emat)+1)
emat <- dat$emat
nmat <- dat$iomat
emat <- dat$emat;
# intronic read (unspliced) expression matrix
nmat <- dat$iomat;
# spanning read (intron+exon) expression matrix
smat <- dat$smat;
# filter expression matrices based on some minimum max-cluster averages
emat <- filter.genes.by.cluster.expression(emat,cell.colors,min.max.cluster.average = 5)
nmat <- filter.genes.by.cluster.expression(nmat,cell.colors,min.max.cluster.average = 1)
smat <- filter.genes.by.cluster.expression(smat,cell.colors,min.max.cluster.average = 0.5)
# look at the resulting gene set
str(intersect(intersect(rownames(emat),rownames(nmat)),rownames(smat)))
rvel.qf <- gene.relative.velocity.estimates(emat,nmat,deltaT=1,kCells = 5,fit.quantile = 0.02)
pca.velocity.plot(rvel.qf,nPcs=5,plot.cols=2,cell.colors=ac(cell.colors,alpha=0.7),cex=1.2,pcount=0.1,pc.multipliers=c(1,-1,-1,-1,-1))
emb
vel
rvel
rvel <- gene.relative.velocity.estimates(emat,nmat,smat=smat,deltaT=1,kCells = 5, min.nmat.emat.slope = 0.1, min.nmat.smat.correlation = 0.1)
vel <- rvel; arrow.scale=6; cell.alpha=0.4; cell.cex=1; fig.height=4; fig.width=4.5;
show.velocity.on.embedding.cor(emb,vel,n=100,scale='sqrt',cell.colors=ac(cell.colors,alpha=cell.alpha),cex=cell.cex,arrow.scale=arrow.scale,arrow.lwd=1)
emb
vel
cell.colors
cell.alpha
cell.cex
emb
setwd("/Users/surgery/Project/HOME/github/bullStock/tushare")
# setwd("D:\\2.Code\\github\\bullStock\\tushare")
options(stringsAsFactors = F)
load("basicStat.Rdata")
islands
mtcars
mtcars[,mtcars$mpg>30]
mtcars[mtcars$mpg>30,]
mtcars2 <- rbind(mtcars, NA)
tail(mtcars2)
mtcars[mtcars$mpg>30,]
mtcars2[mtcars2$mpg>30,]
mtcars2 <- rbind(mtcars, NA)
tail(mtcars2)
mtcars2[mtcars2$mpg>30,]
NA ã€‹ 30
NA > 30
sum(NA > 30)
if (NA > 30) {print "yes"}
if (NA > 30) {print("yes")}
?subset
subset(mtcars2, mpg>30)
library(xlsx)
all <- read.csv("/Users/surgery/Desktop/all.csv", header = T, row.names = 1)
head(all)
p1 <- read.csv("/Users/surgery/Desktop/548.csv", header = T, row.names = 1)
head(p1)
p2 <- read.csv("/Users/surgery/Desktop/655.csv", header = T, row.names = 1)
head(p2)
p3 <- read.csv("/Users/surgery/Desktop/797.csv", header = T, row.names = 1)
head(p3)
all$group.in.venn.plot
all$log2FoldChange
all[rownames(p1),]
all$p1 <- NA
all$p2 <- NA
all$p3 <- NA
all[rownames(p1),]$p1
all[rownames(p1),]$p1 <- p1$log2FoldChange
all[rownames(p2),]$p2 <- p2$log2FoldChange
all[rownames(p3),]$p3 <- p3$log2FoldChange
View(all)
all[,c("p1","p2","p3")]
apply(all[,c("p1","p2","p3")],1,mean)
apply(all[,c("p1","p2","p3")],1, function(x) {mean(x, na.rm = T)})
all$mean <- apply(all[,c("p1","p2","p3")],1, function(x) {mean(x, na.rm = T)})
write.csv(all, file = "all.2.csv")
all <- read.csv("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/readsCount_control_RET_BACE2.csv", header = T)
apply(all[,c("IMR90","UE")], 1, function(x) {mean(x, na.rm = T)})
all$meanCtrl <- apply(all[,c("IMR90","UE")], 1, function(x) {mean(x, na.rm = T)})
all$G446Rlog2FC <- log2(all$BACE2.G446R+1) - log2(all$meanCtrl+1)
all$KOlog2FC <- log2(all$BACE2.KO+1) - log2(all$meanCtrl+1)
table(abs(all$G446Rlog2FC) >= 1.5)
table(abs(all$G446Rlog2FC) > 1.5)
table(abs(all$KOlog2FC) > 1.5)
all$G446RDEG <- abs(all$G446Rlog2FC) >= 1.5
all$KODEG <- abs(all$KOlog2FC) >= 1.5
all$mark <- "non-DEG"
all[all$G446RDEG & ! all$G446RDEG]
all[all$G446RDEG & ! all$KODEG]
all[all$G446RDEG & ! all$KODEG,]
all[all$G446RDEG & ! all$KODEG,]$mark <- "G446R unique DEG"
all[!all$G446RDEG & all$KODEG,]$mark <- "KO unique DEG"
all[all$G446RDEG & all$KODEG,]$mark <- "Common unique DEG"
write.csv(all, file = "BACE2.DEG.csv")
all <- read.csv("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/9-BACE2/UE_BACE2_all.csv", header = T, row.names = 1)
all <- read.csv("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/9-BACE2/UE_BACE2_all.csv", header = T)
table(all$KO_mark)
table(all$G446R_mark)
p1
p1p2
p2
p2p3
p3
all <- read.csv("/Users/surgery/Desktop/all.csv", header = T, row.names = 1)
head(all)
p1 <- read.csv("/Users/surgery/Desktop/548.csv", header = T, row.names = 1)
head(p1)
p2 <- read.csv("/Users/surgery/Desktop/655.csv", header = T, row.names = 1)
head(p2)
p3 <- read.csv("/Users/surgery/Desktop/797.csv", header = T, row.names = 1)
head(p3)
all$group.in.venn.plot
all$log2FoldChange
all[rownames(p1),]
all$p1 <- NA
all$p2 <- NA
all$p3 <- NA
all[rownames(p1),]$p1
all[rownames(p1),]$p1 <- p1$log2FoldChange
all[rownames(p2),]$p2 <- p2$log2FoldChange
all[rownames(p3),]$p3 <- p3$log2FoldChange
all$p1p <- NA
all$p2p <- NA
all$p3p <- NA
all[rownames(p1),]$p1p <- p1$p.value
all[rownames(p2),]$p2p <- p2$p.value
all[rownames(p3),]$p3p <- p3$p.value
all$meanlog2fc <- apply(all[,c("p1","p2","p3")],1, function(x) {mean(x, na.rm = T)})
all$meanp <- apply(all[,c("p1p","p2p","p3p")],1, function(x) {mean(x, na.rm = T)})
write.csv(all, file = "all.2.csv")
